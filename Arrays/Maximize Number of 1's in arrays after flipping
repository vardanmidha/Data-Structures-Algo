https://practice.geeksforgeeks.org/problems/maximize-number-of-1s0905/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=maximize-number-of-1s



Given a binary array arr of size N and an integer M. Find the maximum number of consecutive 1's produced by flipping at most M 0's.

N = 11
arr[] = {1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1}
M = 2
Output:
8
Explanation:
Maximum subarray is of size 8
which can be made subarray of all 1 after
flipping two zeros to 1.



/// We use Sliding Window approach and will check the maximum after every one 0. 



CODE-----



class Solution{
public:
    // m is maximum of number zeroes allowed to flip
    // n is size of array
    int findZeroes(int arr[], int n, int m) {
        // code here
        
        
        unordered_map<int , int> mpp;
        
        
        int i = 0 , j=0;
        
        int maxi = 0;
        int count = 0;
       /* while(j<n){
            
            
            mpp[arr[j]]++;
            
            
            
            if(mpp[0] <= m){
                
                
                maxi = max(maxi , j-i+1);
                j++;
                
            }
            
            else if (mpp[0] >m)
{
    
    while (mpp[0] >1)
    {
        mpp[arr[i]]--;
      
        i++;
    }
    //i=j;
    
    
    
   while(mpp[0] >m){
       
       mpp[arr[i]]--;
       
     i++;
   }
j++;

}

            
            
            
            
            
            
            
            
        }
        */
        
        
        
        while(j<n){
            
            if(arr[j] == 0){
                count ++;
            }
            
            
            
            while(count > m){
                
                if(arr[i] == 0){
                    count --;
                }
                
                i++;
                
                
            }
            
            
            
            
            
            maxi = max(maxi , j-i+1);
            
            j++;
            
        }
        
        
        
        
        
        return maxi;
        
    }  
};

